import { Injectable } from '@nestjs/common';
import { PrismaService } from '../../../prisma/prisma.service';
import { ChannelMessage, EMarkdownType } from 'mezon-sdk';
import { AiService } from 'src/ai/ai.service';
import { MezonService } from 'src/mezon/mezon.service';
import { EMessageMode } from 'src/common/enums/mezon.enum';
import { getRef } from 'src/common/utils/get-ref';
import { FumoMessageService } from 'src/mezon/fumo-message.module';
@Injectable()
export class TomTatService {
  constructor(
    private readonly prisma: PrismaService,
    private readonly aiService: AiService,
    private readonly mezon: MezonService,
    private readonly fumoMessage: FumoMessageService,
  ) {}

  async handleHelp(message: ChannelMessage) {
    await this.fumoMessage.sendSystemMessage(
      message,
      `ü§ñFUMO BOT\n*tomtat <n ph√∫t> : T√≥m t·∫Øt h·ªôi tho·∫°i trong channel hi·ªán t·∫°i t·ª´ n ph√∫t tr∆∞·ªõc\n*fhelp : Hi·ªÉn th·ªã danh s√°ch l·ªánh\n*fping : Ki·ªÉm tra bot\n*kttk: Ki·ªÉm tra s·ªë l∆∞·ª£ng token ƒëang c√≥\n*rut <n token>: R√∫t n token v·ªÅ t√†i kho·∫£n Mezon\nƒê·ªÉ n·∫°p ti·ªÅn, h√£y chuy·ªÉn token tr·ª±c ti·∫øp cho FOMU.\n\nüïπÔ∏èGAME:\n*kbb <n token> : Ch∆°i k√©o b√∫a bao v·ªõi ƒë·ªëi th·ªß, c·∫ßn reply tin nh·∫Øn ƒë·ªëi th·ªß(c∆∞·ª£c n token, n>=0)\n*fxsmb: Xem th√¥ng tin x·ªï s·ªë mi·ªÅn b·∫Øc ng√†y h√¥m nay\n*fxs <xx>: ƒê·∫∑t 5000 token v√†o s·ªë xx (2 ch·ªØ s·ªë), k·∫øt qu·∫£ s·∫Ω th√¥ng b√°o khi c√≥ k·∫øt qu·∫£ x·ªï s·ªë ng√†y h√¥m nay. T·∫•t c·∫£ s·ªë ti·ªÅn c√°c ng∆∞·ªùi ch∆°i c·ªçc s·∫Ω ƒë∆∞·ª£c chuy·ªÉn cho ng∆∞·ªùi ƒë·∫∑t s·ªë g·∫ßn 2 s·ªë cu·ªëi c·ªßa gi·∫£i ƒë·∫∑c bi·ªát KQXS.\n*giaithuong: Xem t·ªïng gi·∫£i th∆∞·ªüng d√†nh cho ng∆∞·ªùi chi·∫øn th·∫Øng`,
      message,
    );
  }

  async handleTomTat(message: ChannelMessage, lastMinute: number) {
    const ref = getRef(message);
    // { type: 'pre', e: 9, s: 3 }

    const promiseMessage = await this.mezon.sendMessageToChannel({
      channel_id: message.channel_id,
      clan_id: message.clan_id!,
      is_public: message.is_public || false,
      mode: message.mode ?? EMessageMode.CHANNEL_MESSAGE,
      msg: {
        t: 'ƒêang t√≥m t·∫Øt...',
      },
      ref: [ref],
    });

    const messages = await this.prisma.message_logs.findMany({
      where: {
        channel_id: message.channel_id,
        clan_id: message.clan_id,
        created_at: {
          gte: new Date(Date.now() - lastMinute * 60 * 1000),
        },
      },
    });
    const messagesFetch = messages.map((message) => ({
      t: message.content!,
      sender_name: message.sender_name,
      send_at: message.created_at,
    }));
    const result = await this.aiService.generateTomtat(messagesFetch);
    await this.mezon.updateMessage(
      message.clan_id!,
      promiseMessage.channel_id,
      message.mode || EMessageMode.CHANNEL_MESSAGE,
      message.is_public || false,
      promiseMessage.message_id,
      {
        t: result.content as string,
        mk: [
          {
            type: 'pre' as EMarkdownType,
            e: result.content.length,
            s: 24,
          },
        ],
      },
      [ref],
    );
  }
}
